from datetime import datetime
from typing import Optional

import pymysql
from sqlalchemy import DateTime, func
from sqlalchemy.orm import (
    DeclarativeBase,
    Mapped,
    mapped_column,
    relationship,
    sessionmaker,
)


class Base(DeclarativeBase):
    """Base class for all database models"""

    # Common columns for all tables
    id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)
    created_at: Mapped[datetime] = mapped_column(
        DateTime, default=func.now(), nullable=False
    )
    updated_at: Mapped[datetime] = mapped_column(
        DateTime, default=func.now(), onupdate=func.now(), nullable=False
    )


def drop_all_tables(connection: pymysql.Connection):
    """Supprimer toutes les tables dans l'ordre inverse des d√©pendances"""
    tables_to_drop = [
        "tasks",  # R√©f√©rences users
        "products",  # R√©f√©rences suppliers, orders, sites
        "orders",  # R√©f√©rences suppliers, users
        "sites",  # R√©f√©rences users
        "suppliers",  # Aucune d√©pendance
        "users",  # Aucune d√©pendance
    ]

    try:
        with connection.cursor() as cursor:
            # D√©sactiver les contraintes de cl√©s √©trang√®res temporairement
            cursor.execute("SET FOREIGN_KEY_CHECKS = 0")

            for table_name in tables_to_drop:
                try:
                    cursor.execute(f"DROP TABLE IF EXISTS {table_name}")
                    print(f"üóëÔ∏è  Table '{table_name}' supprim√©e")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Impossible de supprimer la table '{table_name}': {e}")

            # R√©activer les contraintes de cl√©s √©trang√®res
            cursor.execute("SET FOREIGN_KEY_CHECKS = 1")
            connection.commit()
            print("‚úÖ Toutes les tables ont √©t√© nettoy√©es !")

    except Exception as e:
        connection.rollback()
        print(f"‚ùå Erreur lors du nettoyage des tables : {e}")


def create_table(
    connection: pymysql.Connection,
    sql_table_name: str,
    sql_command: str,
    sql_indexes: Optional[list[str]] = None,
):
    """Cr√©er une table users bas√©e sur le sch√©ma SQLAlchemy"""
    try:
        with connection.cursor() as cursor:
            # SQL g√©n√©r√© √† partir du mod√®le User SQLAlchemy
            create_table_sql = sql_command
            cursor.execute(create_table_sql)

            # Cr√©er les index d√©finis dans le mod√®le User
            if sql_indexes:
                for index_sql in sql_indexes:
                    cursor.execute(index_sql)
                    print(
                        f"‚úÖ Index cr√©√©s pour optimiser les performances sur la table '{sql_table_name}'"
                    )

            connection.commit()
            print(f"‚úÖ Table '{sql_table_name}' cr√©√©e avec le sch√©ma SQLAlchemy !")

    except Exception as e:
        connection.rollback()
        print(f"‚ùå Erreur lors de la cr√©ation de table : {e}")
