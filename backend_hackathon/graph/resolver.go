package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"backend_hackathon/graph/generated"
	"backend_hackathon/graph/model"
	"context"

	users "backend_hackathon/graph/resolvers/api/users"

	"github.com/jmoiron/sqlx"
)

type Resolver struct {
	DB *sqlx.DB
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (int, error) {
	return users.CreateUser(r.DB, &input)
}

// UpdateUser is the resolver for the updateUser field.
// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUserInput, filter model.CreateUserInput) (bool, error) {
	return users.UpdateUser(r.DB, &input, &filter)
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, filter model.UserFilter) ([]*model.User, error) {
	return users.GetUsers(ctx, r.DB, &filter)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateVehicle(ctx context.Context, input model.CreateVehicleInput) (int, error) {
	return 0, fmt.Errorf("not implemefesiufhisefnted: CreateVehicle - createVehicle")
}
func (r *mutationResolver) UpdateVehicle(ctx context.Context, input model.UpdateVehicleInput, filter model.UpdateVehicleInput) (bool, error) {
	panic(fmt.Errorf("not implemented: UpdateVehicle - updateVehicle"))
}
func (r *mutationResolver) DeleteVehicle(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteVehicle - deleteVehicle"))
}
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUserInput, filter model.UpdateUserInput) (bool, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}
func (r *mutationResolver) CreateDriver(ctx context.Context, input model.CreateDriverInput) (int, error) {
	panic(fmt.Errorf("not implemented: CreateDriver - createDriver"))
}
func (r *mutationResolver) UpdateDriver(ctx context.Context, input model.UpdateDriverInput, filter model.UpdateDriverInput) (bool, error) {
	panic(fmt.Errorf("not implemented: UpdateDriver - updateDriver"))
}
func (r *mutationResolver) DeleteDriver(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteDriver - deleteDriver"))
}
func (r *mutationResolver) CreateMessage(ctx context.Context, input model.CreateMessageInput) (int, error) {
	panic(fmt.Errorf("not implemented: CreateMessage - createMessage"))
}
func (r *mutationResolver) UpdateMessage(ctx context.Context, input model.UpdateMessageInput, filter model.UpdateMessageInput) (bool, error) {
	panic(fmt.Errorf("not implemented: UpdateMessage - updateMessage"))
}
func (r *mutationResolver) DeleteMessage(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteMessage - deleteMessage"))
}
func (r *mutationResolver) DriverStatusManager(ctx context.Context, input *model.DriverFilter, latitude float64, longitude float64) (bool, error) {
	panic(fmt.Errorf("not implemented: DriverStatusManager - DriverStatusManager"))
}
func (r *queryResolver) GetUsers(ctx context.Context, filter *model.UserFilter) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: GetUsers - getUsers"))
}
func (r *queryResolver) GetDrivers(ctx context.Context, filter *model.DriverFilter) ([]*model.Driver, error) {
	panic(fmt.Errorf("not implemented: GetDrivers - getDrivers"))
}
func (r *queryResolver) GetMessages(ctx context.Context, filter *model.MessageFilter) ([]*model.Message, error) {
	panic(fmt.Errorf("not implemented: GetMessages - getMessages"))
}
*/
